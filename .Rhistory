setwd("~/GitHub/habitat-selection-guidance")
knitr::opts_chunk$set(echo = TRUE)
#Load packages
library(ResourceSelection)
library(glmmTMB)
library(plotrix)
library(broom.mixed)
library(knitr)
library(amt)
library(remotes)
if(!require(grateful)){
remotes::install_github("Pakillo/grateful")
}
library(grateful)
# Number of Sampled individuals (e.g., tracked via GPS telemetry)
n.indiv=20
# Define the true population-level coefficients
# and use these to simulate individualize-level coeficents
#Intercept - non-random. Make them all the same, except the last individual
# This difference is used below.
beta0 = c(rep(1.5,(n.indiv-1)),0.2)
# Selection against at population-level
# Low variation among individuals
beta1.mu = -1
beta1.sd = 0.2
set.seed(543543)
beta1=rnorm(n.indiv,
mean = beta1.mu,
sd = beta1.sd
)
# No selection at population-level
# Wide variation among individuals
beta2.mu = 0
beta2.sd = 1
set.seed(5435431)
beta2=rnorm(n.indiv,
mean = beta2.mu,
sd = beta2.sd
)
# Selection for this feature at population-level
# Low variation among individuals
beta3.mu = 1
beta3.sd = 0.2
set.seed(1543543)
beta3=rnorm(n.indiv,
mean = beta3.mu,
sd = beta3.sd
)
# Combine coefficients and plot these values
betas=data.frame(b0 = beta0,
b1 = beta1,
b2 = beta2,
b3 = beta3)
par(mfrow=c(3,1))
hist(betas[,2],xlab=bquote(beta[1]),xlim=c(-3,3),main="True Individual Coeficient Values",breaks=10,freq=FALSE)
abline(v=beta1.mu,lwd=2,col=2)
curve(dnorm(x,beta1.mu,beta1.sd),lwd=3,col=3,add=TRUE)
legend("topright",lwd=3,col=c("gray","red","green"),legend=c("Indiv. Coefs", "Pop. Mean","True Distribution"))
hist(betas[,3],xlab=bquote(beta[2]),xlim=c(-3,3),main="",breaks=20,freq=FALSE)
abline(v=beta2.mu,lwd=2,col=2)
curve(dnorm(x,beta2.mu,beta2.sd),lwd=3,col=3,add=TRUE)
legend("topright",lwd=3,col=c("gray","red","green"),legend=c("Indiv. Coefs", "Pop. Mean","True Distribution"))
hist(betas[,4],xlab=bquote(beta[3]),xlim=c(-3,3),main="",breaks=20,freq=FALSE)
abline(v=beta3.mu,lwd=2,col=2)
curve(dnorm(x,beta3.mu,beta3.sd),lwd=3,col=3,add=TRUE)
legend("topright",lwd=3,col=c("gray","red","green"),legend=c("Indiv. Coefs", "Pop. Mean","True Distribution"))
library(amt)
data("amt_fisher")
amt_fisher_covar <- get_amt_fisher_covars()
rsf_data <- amt_fisher |> filter(name == "Leroy") |> make_track(x_, y_, t_) |> random_points() |> extract_covariates(amt_fisher_covar$landuse) |> mutate(lu = factor(landuse))
m1 <- rsf_data |> fit_rsf(case_ ~ lu)
m1
traceback()
install.packages("amt")
detach("package:amt", unload = TRUE)
install.packages("amt")
install.packages("amt")
library(amt)
data("amt_fisher")
amt_fisher_covar <- get_amt_fisher_covars()''
amt_fisher_covar <- get_amt_fisher_covars()
amt_fisher_covar <- get_amt_fisher_covars()
''
rsf_data <- amt_fisher |> filter(name == "Leroy") |> make_track(x_, y_, t_) |> random_points() |> extract_covariates(amt_fisher_covar$landuse) |> mutate(lu = factor(landuse))
m1 <- rsf_data |> fit_rsf(case_ ~ lu)
m1
rsf_data$case_
rsf_data$x_
rsf_data$landuse
rsf_data$lu
library(tidyr)
rsf_data <- amt_fisher |> filter(name == "Leroy") |> make_track(x_, y_, t_) |> random_points() |> extract_covariates(amt_fisher_covar$landuse) |> mutate(lu = factor(landuse))
m1 <- rsf_data |> fit_rsf(case_ ~ lu)
m1
m1 <- rsf_data |> fit_rsf(case_ ~ landuse)
m1
fit_rsf
test=function (data, formula, ...)
{
m <- stats::glm(formula, data = data, family = stats::binomial(link = "logit"),
...)
m <- list(model = m)
class(m) <- c("fit_logit", "glm", class(m))
m
}
m1 <- rsf_data |> test(case_ ~ landuse)
m1
<- stats::glm(formula=case_ ~ landuse, data = temp, family = stats::binomial(link = "logit"))
<- stats::glm(formula=case_ ~ landuse, data = temp, family = stats::binomial(link = "logit"))
stats::glm(formula=case_ ~ landuse, data = temp, family = stats::binomial(link = "logit"))
temp
test
temamt_fisher
temp=amt_fisher
stats::glm(formula=case_ ~ landuse, data = temp, family = stats::binomial(link = "logit"))
temp=rsf_data
stats::glm(formula=case_ ~ landuse, data = temp, family = stats::binomial(link = "logit"))
m=stats::glm(formula=case_ ~ landuse, data = temp, family = stats::binomial(link = "logit"))
class(m) <- c("fit_logit", "glm", class(m))m
,m
m
amt::fit_rsf(data=temp,foormula=case_ ~ landuse)
amt::fit_rsf(data=temp,formula=case_ ~ landuse)
remotes::install_github("jmsigner/amt")
